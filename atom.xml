<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Locutus</title>
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://locutus.io/"/>
  <updated>2017-02-23T10:40:23.818Z</updated>
  <id>http://locutus.io/</id>
  
  <author>
    <name>Kevin van Zonneveld</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php.js is Dead - Long Live Locutus</title>
    <link href="http://locutus.io/2016/05/announcing-locutus/"/>
    <id>http://locutus.io/2016/05/announcing-locutus/</id>
    <published>2016-05-02T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>As was briefly mentioned in <a href="/blog/2016/04/20/breaking-bc/">Breaking Backwards Compatibility</a>, 
I am launching a big iteration of php.js today. It includes so <a href="https://github.com/kvz/locutus/pull/291" target="_blank" rel="external">many</a> breaking <a href="https://github.com/kvz/locutus/blob/master/CHANGELOG.md#v200" target="_blank" rel="external">changes</a> that it is safe to say that, after 
9 years, php.js is dead. And, like a phoenix, <strong>Locutus</strong> has risen from its ashes.</p>
<p>Locutus will largely have the same mission: </p>
<blockquote>
<p>Offer a community platform to collaborate on JavaScript counterparts 
to functions from other languages, for fun and educational purposes.</p>
</blockquote>
<p>Locutus will, however, also be different on a few key points. Locutus will focus on:</p>
<ul>
<li>Expanding to other languages, such as C, Go, Python and Ruby</li>
<li>Hack-free porting, meaning we will only port individual functions from the standard libraries, while avoiding language features, environment, data-types and configuration</li>
<li>The educational aspect and the intellectual challenge</li>
<li>Using npm as the distribution platform of choice, so you can do <code>var strings = require(&#39;golang/strings&#39;)</code> and, in case the browser is your target platform, bundle this via <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>, <a href="http://rollupjs.org/" target="_blank" rel="external">rollup.js</a> or <a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>.</li>
<li>Trying to deliver functions that are interoperable between browsers and Node.js, but also allowing to target just one platform when that saves us from writing overly wieldy code. These cases will be documented with a <code>note</code>. An example of this would be opening a file from disk. We would then state it is Node.js-only.</li>
</ul>
<p>While it is still very much a work in progress, I have already deprecated and updated many functions that did not adhere to this renewed focus. If you spot a function I overlooked, please let me know on GitHub.</p>
<p>I feel these changes were needed to regain the motivation required for leading this project. For a long time, I have struggled with php.js in its old form. I rarely did maintenance runs anymore and when I did, it was guilt-driven rather than out of curiosity or excitement - the things that led me to start this project.</p>
<p>There are several reasons why I had lost my intrinsic motivation:</p>
<ul>
<li>The things that could reasonably be ported, had already been ported. The things that probably should not have been ported, had been ported too - and were now mostly good for provoking purists and inducing maintenance load. Not very rewarding.</li>
<li>Misuse of the project. I shed approximately 451 tears when some people started using the project so they would not have to learn JavaScript and could continue PHP-ing in the browser, using 2.1MB, 451-function, ready-to-rock spaceship bundles in the browser. I made efforts to <a href="/blog/2013/05/a-word-on-the-focus-of-php-dot-js/">stop newcomers from doing that</a>. I shed approximately 2.1 tears from the angry notes they then sent me.</li>
<li>I started a new company and protocol, which took much time by itself, but also meant I spent my time writing exclusively in other programming languages. You won’t find any bitterness about that here, but it did mean I had less time and use for PHP oriented projects</li>
<li>9 years ago, the tech world was a different place. Node.js did not exist, <a href="https://www.w3counter.com/globalstats.php?date=2007-05-30" target="_blank" rel="external">everyone was on IE6</a>, and JavaScript’s main use was opening popups. Going from age 23 to 32, I have changed my stance on pretty much everything. One of these things that I have now abandoned is the idea that our project could perhaps one day be used as an interactive debugging tool, or run entire scripts from other languages in Node. I pursued that goal for some time with the thirst of a youngster, and while we had some success doing so, it drove me to write and accept hacks that, in retrospect, have probably secured me a special place in hell. Projects like <a href="https://github.com/gopherjs/gopherjs" target="_blank" rel="external">GopherJS</a> or <a href="http://kripken.github.io/emscripten-site/" target="_blank" rel="external">Emscripten</a> offer far better means to that end. Our approach isn’t suitable for it.</li>
</ul>
<p>Knowing that I was beginning to fall short as a project lead, I tried to recruit fresh blood to replace me. However, even though there is still an active community of contributors, I couldn’t find any volunteers for taking the lead. For a while, I considered declaring <code>[UNMAINTAINED]</code>, but I felt - and still feel - too great a deal of duty and responsibility towards past and present contributors.</p>
<p>So instead, I started thinking about what it would take for me to get my mojo back. Having analyzed 
what had crippled it over the past 9 years, I decided to make the changes that would allow it to flow 
back again.</p>
<p>If you are interested in the nuts and bolts, these are a few things I have been secretly 
working on in order to clean up our codebase and breathe new life into this project. I have:</p>
<ul>
<li>Added (generated) Mocha tests for every function, instead of our own test framework</li>
<li>Added a <code>$global</code> that works in both Browsers and Node.js (we should try to avoid this when we can though)</li>
<li>Added a CONTRIBUTORS guide as well as New Issue and Pull Request templates, so we can be more efficient using GitHub</li>
<li>Added native JSON, base64, sha1 and md5 support where available</li>
<li>Added npm versioning and releases</li>
<li>Added support for ES6, any function can be written in this JavaScript version and it will be transpiled to ES5 before we publish to npm to ensure compatability.</li>
<li>Asked <a href="http://troydodd.deviantart.com/art/Locutus-of-Borg-217586598" target="_blank" rel="external">Troy Dodd</a> if we could use his stunning Locutus artwork to be our avatar (and he said yes!)</li>
<li>Assimilated a dozen of example functions that showcase how we could port four new languages to JavaScript</li>
<li>Changed all functions to make them adhere to the <a href="http://standardjs.com/" target="_blank" rel="external">JavaScript Standard Style</a> and have a max line length of 100. Travis CI will fail when new additions do not adhere</li>
<li>Deprecated/documented all functions using <code>eval</code>, <code>new Function</code> and other bad practices</li>
<li>Fixed  around 50 failed tests that were previously marked as skipped (still a few to go)</li>
<li>Made it so that all functions can be required individually via npm</li>
<li>Made it so that dependencies between functions are now handled via CommonJS <code>require</code></li>
<li>Moved the website from Jekyll to Hexo, so that we lose a Ruby dependency and everything needed to work on the website can be <code>npm install</code>ed</li>
<li>Refactored the utility class</li>
<li>Removed <code>_workbench</code> and <code>_experimental</code> folders. They are available for reference in 1.3.2, but making them harder to find for newcomers should help avoid complaints and confusion. If you want to experiment, we can use local files or branches when it’s time to collaborate.</li>
</ul>
<p>I understand this all can feel like a radical shift, since functions have different locations and there is talk of deprecating functions. Perhaps you wrote these functions with your own blood, sweat and tears. To make matters worse, I will also be deprecating many GitHub Issues and Pull Requests that have become invalid due to this new major push.</p>
<p>I hope you can agree that this project found itself in a dead-end street and that I had to undo some of our work to back out and get us on the road again. I am doing this not to hurt past contributors, but to honor them. I have spent many nights and weekends modernizing this project, so that our work could be given new life. I would also like to voice a word of appreciation to you as a contributor, for the hard work that went into crafting this project. Rewriting a language in another language is no small task, and people tend to forget that in order to port an alien language to JavaScript, we had to write a lot of JavaScript. </p>
<p>In failing to restrain myself and having tried to port the entire language, I may have ventured into the darker engineering arts. And in the end, it did not even let me fully realize my goal in return. I accept defeat here. However, I am also proud that we have built a welcoming and friendly community together where over the course of 9 years, hundreds of developers from all over the world have helped each other to improve their code, to learn JavaScript, and help others learn it. I, for one, have become much more familiar with JavaScript’s delicacies because of it, and I like to think the same goes for many of you as well. Therefore, I accept both defeat and victory.</p>
<p>As a contributor to this project, I hope Locutus brings the changes that can spark your interest again, just as it has for me. I hope you will join me on this new adventure to a magical land of standard libraries full of functions that are just <a href="https://golang.org/pkg/strings/" target="_blank" rel="external">screaming to be ported</a>. I am looking at you, rainy Sunday afternoon..</p>
<p>This time we will be a little bit older, a little bit wiser, and hopefully have the resolve to steer clear of the darker areas. Nevertheless, we will have just as much fun in challenging ourselves and each other, as well as by learning other languages. I promise! : )</p>
<p>For those that can forgive me for my past mistakes and for deprecating some of our previous work in this new major release: 
you can try Locutus right now if you want:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm init</div><div class="line">$ npm install locutus</div><div class="line">$ vim index.js</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> echo = <span class="built_in">require</span>(<span class="string">'locutus/php/strings/echo'</span>)</div><div class="line"><span class="keyword">var</span> capwords = <span class="built_in">require</span>(<span class="string">'locutus/python/string/capwords'</span>)</div><div class="line"><span class="keyword">var</span> strings = <span class="built_in">require</span>(<span class="string">'locutus/golang/strings'</span>)</div><div class="line"><span class="keyword">var</span> rubyMath = <span class="built_in">require</span>(<span class="string">'locutus/ruby/Math'</span>)</div><div class="line"><span class="keyword">var</span> c = <span class="built_in">require</span>(<span class="string">'locutus/c'</span>)</div><div class="line"></div><div class="line">echo(capwords(<span class="string">'locutus'</span>))</div><div class="line">echo(strings.Contains(<span class="string">'Locutus'</span>, <span class="string">'us'</span>))</div><div class="line">echo(rubyMath.acos(<span class="number">0.3</span>))</div><div class="line">echo(c.math.abs(<span class="number">-5</span>))</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ node index.js</div><div class="line">Locutus</div><div class="line"><span class="literal">true</span></div><div class="line">1.266103672779499</div><div class="line">5</div></pre></td></tr></table></figure>
<p>If you want to help Locutus, our newly added languages don’t have much meat on the bones yet and it would be fantastic to see if you can think of ways to assimilate a function that Locutus currently does not harbor.</p>
<p>Also, there are plenty project-wide ideas in our <a href="https://github.com/kvz/locutus/blob/master/CHANGELOG.md#Backlog" target="_blank" rel="external">Backlog</a> that we would love help with, so I guess there is just one thing left to say..</p>
<p><a href="https://github.com/kvz/locutus" target="_blank" rel="external">To the GitHubs</a>!</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As was briefly mentioned in &lt;a href=&quot;/blog/2016/04/20/breaking-bc/&quot;&gt;Breaking Backwards Compatibility&lt;/a&gt;, 
I am launching a big iteration
    
    </summary>
    
    
      <category term="future" scheme="http://locutus.io/tags/future/"/>
    
      <category term="js" scheme="http://locutus.io/tags/js/"/>
    
      <category term="golang" scheme="http://locutus.io/tags/golang/"/>
    
      <category term="python" scheme="http://locutus.io/tags/python/"/>
    
      <category term="ruby" scheme="http://locutus.io/tags/ruby/"/>
    
      <category term="php" scheme="http://locutus.io/tags/php/"/>
    
      <category term="c" scheme="http://locutus.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Breaking Backwards Compatibility</title>
    <link href="http://locutus.io/2016/04/breaking-bc/"/>
    <id>http://locutus.io/2016/04/breaking-bc/</id>
    <published>2016-04-20T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all,</p>
<p>I’m planning to push out a big release soon that will change a lot of things about this project.</p>
<p>Among things, it will:</p>
<ul>
<li>Offer a platform to learn other languages besides PHP</li>
<li>Be focussed on npm as the main distribution platform, so you can <code>var sprintf = require(&#39;string/sprintf&#39;)</code> (and use Browserify, Rollup, or Webpack on that if the browser is your target)</li>
<li>Deprecate functions that were desperately trying to mimic PHP, yet never really succeeding</li>
</ul>
<p>The old version will remain available as <code>v1.3.2</code>.</p>
<p>I certainly hope you are not using this project like so:</p>
<p><a href="https://raw.githubusercontent.com/kvz/phpjs/master/functions/strings/sprintf.js" target="_blank" rel="external">https://raw.githubusercontent.com/kvz/phpjs/master/functions/strings/sprintf.js</a></p>
<p>as that is asking for BC breakage as well as impolite towards GitHub, but if you are, you should change your links to</p>
<p><a href="https://raw.githubusercontent.com/kvz/locutus/v1.3.2/functions/strings/sprintf.js" target="_blank" rel="external">https://raw.githubusercontent.com/kvz/locutus/v1.3.2/functions/strings/sprintf.js</a></p>
<p>until you can figure out how to vendor in that function and host it yourself.</p>
<p>If you are using the project via npm, the old version will be available under the <code>1.3.2</code> package version.</p>
<p>If you are using it via Git, use <code>git checkout v1.3.2</code>.</p>
<p>The new version will be available as <code>v2.0.2</code>, as well as <code>master</code> by the time I launch. I’m not sure yet when that will be, but I thought it might save some headaches to already give the heads up about this.</p>
<p>Stay tuned for more,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I’m planning to push out a big release soon that will change a lot of things about this project.&lt;/p&gt;
&lt;p&gt;Among things, it w
    
    </summary>
    
    
      <category term="future" scheme="http://locutus.io/tags/future/"/>
    
  </entry>
  
  <entry>
    <title>Switching to Jekyll</title>
    <link href="http://locutus.io/2016/04/jekyll/"/>
    <id>http://locutus.io/2016/04/jekyll/</id>
    <published>2016-04-02T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all,</p>
<p><a href="http://locutus.io/blog/2012/09/new-site/">Four years ago</a> we switched from a PHP generated site to 
one built in Octopress, so it would be easier for people to contribute, and we would not have to worry
about keeping servers online.</p>
<p>Things have changed since then. The Octopress version we used is no longer supported, and the new
3.0 is leans heavily on Jekyll.</p>
<p>With the backing of GitHub for GitHub Pages, Jekyll itself has improved tremendously. </p>
<p>Combined, I felt we reached the tipping point where it made more sense to port things to Jekyll
so we can profit from their speed of development, ecosystem, and the fact that many developers
are already familiar with it.</p>
<p>Long story short, I just <a href="https://github.com/kvz/locutus/pull/284" target="_blank" rel="external">completed</a> the migration, and if you want to work on the website, here’s
what you’d do.</p>
<p>Jekyll runs on Ruby, so make sure you have that installed, preferably with a working version of bundler. The rest of the site-building dependencies are node-based, so make sure you have a working <code>npm</code> as well.</p>
<p>To install the dependencies:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line">npm run website:install</div></pre></td></tr></table></figure>
<p>To start a local version of the website and open a browser that will auto-refresh on changes, type:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run website:start</div></pre></td></tr></table></figure>
<p>Now hack on the files in the <code>./website</code> folder, until you’re happy with the local results. Commit the changes to Git or send in a PR if you don’t have write access to the repository. This means the sources are saved, but someone with write access still needs to deploy.</p>
<p>To do that, type:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run website:deploy</div></pre></td></tr></table></figure>
<p>That’s it : )</p>
<p>P.S. We have a few custom build steps such as rendering the functions, that make it hard for us to only use the GitHub Pages provided Jekyll, this means for the time being we’ll be relying on our own scripts and Jekyll version. That said, it’s still possible to orchestrate auto-deploys whenever there’s a change to <code>master</code>, by using Travis CI and encrypted environment keys. If I have time, I’d like to set this up too. This way people could propose changes, and merging them would be enough to see them go live.</p>
<p>Best wishes,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://locutus.io/blog/2012/09/new-site/&quot;&gt;Four years ago&lt;/a&gt; we switched from a PHP generated site to 
one built 
    
    </summary>
    
    
      <category term="website" scheme="http://locutus.io/tags/website/"/>
    
      <category term="octopress" scheme="http://locutus.io/tags/octopress/"/>
    
      <category term="future" scheme="http://locutus.io/tags/future/"/>
    
      <category term="jekyll" scheme="http://locutus.io/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Standard Coding Style</title>
    <link href="http://locutus.io/2016/04/standard-coding-style/"/>
    <id>http://locutus.io/2016/04/standard-coding-style/</id>
    <published>2016-04-01T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Three years ago we switched from our own home-brown coding style convention to Felix’ Node.js Style Guide, 
for reasons outlined in the introductory post: <a href="/blog/2013/05/coding-style/">Coding Style</a>.</p>
<p>The reasoning behind adopting such a widely supported coding style, has not changed. Locutus should be
focused on its added value, and less so arguing about, and inventing custom conventions around coding style.</p>
<p>What has changed a great deal though, is the JavaScript landscape. A large part of the community is gathering behind <a href="http://standardjs.com/" target="_blank" rel="external">Feross Aboukhadijeh’s JavaScript Standard Style</a> and <a href="http://eslint.org/" target="_blank" rel="external">ESLint</a>.</p>
<p>Standard offers sensible defaults (no semicolons might take some getting used to but it’s really <a href="http://mislav.net/2010/05/semicolons/" target="_blank" rel="external">ok</a> and after two weeks you won’t look back). ESLint offers powerful ways to enforce the standard.</p>
<p>ESLint for instance, offers a <code>--fix</code> command-line argument flag, that converts non-conforming codebases to whichever coding style convention was selected.</p>
<p>The auto-fixing does not cover all rules yet, but it’s getting better every month. As we upgrade these modules and fix our codebase, more and more legacy will conform.</p>
<p>Additionally, I’ve added non-fatal linting to our Travis CI builds, so you can see which functions don’t comply, and make them.</p>
<p>Locutus does few naughty tricks to bend the laws of physics and overcome a few obstacles in porting programming languages. For this reason, Locutus a few exceptions listed in <code>.eslintrc</code>. As a goal for the future, it would be interesting to see if we could lose these exceptions.</p>
<p>Best wishes,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Three years ago we switched from our own home-brown coding style convention to Felix’ Node.js Style Guide, 
for reasons outlined in the i
    
    </summary>
    
    
      <category term="coding style" scheme="http://locutus.io/tags/coding-style/"/>
    
      <category term="convention" scheme="http://locutus.io/tags/convention/"/>
    
  </entry>
  
  <entry>
    <title>Coding Style</title>
    <link href="http://locutus.io/2013/05/coding-style/"/>
    <id>http://locutus.io/2013/05/coding-style/</id>
    <published>2013-05-04T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Given <a href="/blog/2013/05/a-word-on-the-focus-of-php-dot-js/">the focus of Locutus</a> I think
we should re-invent as few wheels as possible and make use of sensible tools
and standards that are other people have already invested a great deal of time
in to get right.</p>
<p>In this light, I’ve decided to adopt <a href="http://nodeguide.com/style.html" target="_blank" rel="external">Felix’ Node.js Style Guide</a>
for coding standards, instead of running our own.</p>
<p>It saves us time maintaining and it becomes easier for people to contribute because
they don’t have to memorize where Locutus diverges.</p>
<p>For the big parts our codebase is already compatible with it, so
we won’t get any weird <a href="http://www.emacswiki.org/pics/static/TabsSpacesBoth.png" target="_blank" rel="external">space + tab</a> indentations as a result, as we start adding code that follows the guide.</p>
<p>Going forward, contributions should comply with these conventions before being
merged in.</p>
<p>Best wishes,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given &lt;a href=&quot;/blog/2013/05/a-word-on-the-focus-of-php-dot-js/&quot;&gt;the focus of Locutus&lt;/a&gt; I think
we should re-invent as few wheels as po
    
    </summary>
    
    
      <category term="coding style" scheme="http://locutus.io/tags/coding-style/"/>
    
      <category term="convention" scheme="http://locutus.io/tags/convention/"/>
    
  </entry>
  
  <entry>
    <title>A Word on the Focus of php.js</title>
    <link href="http://locutus.io/2013/05/a-word-on-the-focus-of-php-dot-js/"/>
    <id>http://locutus.io/2013/05/a-word-on-the-focus-of-php-dot-js/</id>
    <published>2013-05-03T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Hi everybody,</p>
<p>The <a href="/blog/2012/09/26/new-site/">new site</a> has no server-side code. Instead
we generate HTML <a href="http://kvz.io/blog/2012/09/25/blog-with-octopress/" target="_blank" rel="external">using Octopress</a>
and push to GitHub Pages, all from one <a href="https://github.com/kvz/locutus" target="_blank" rel="external">repository</a>.</p>
<p>This saves hosting costs/overhead and makes it really easy for people to submit
pull requests and for <a href="https://github.com/kvz/locutus/contributors" target="_blank" rel="external">contributors</a>
to make changes that I don’t always have time
for. It makes the project less dependent on me and more a community effort.</p>
<p>To move forward, sometimes you have to cut features.
In this case I had to lose our compiler, a webtool that relied on server-side code
to generate minified packages from php.js functions.</p>
<p>Understandibly this has <a href="https://github.com/kvz/locutus/issues/75" target="_blank" rel="external">raised</a> <a href="http://locutus.io/about/index.html#comment-861825612">questions</a>.
It is still possible to bundle 4 useful functions:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># - Note that this combined 4 php.js functions into a file called: myLocutus</span></div><div class="line"><span class="comment"># and minified version: myphp.min.js in the current directory.</span></div><div class="line"><span class="comment"># - Note that this throws all functions into the</span></div><div class="line"><span class="comment"># global scope. It would be better to put them in a dedicated locutus object.</span></div><div class="line">curl -sk https://raw.github.com/kvz/locutus/31bf3129f08672f8c1d6d0dcad2368ebc4ac57f2/<span class="built_in">functions</span>/\</div><div class="line">&#123;datetime/date\</div><div class="line">,datetime/strtotime\</div><div class="line">,strings/md5\</div><div class="line">,strings/vsprintf\</div><div class="line">&#125;.js |tee ./myLocutus &amp;&amp; \</div><div class="line">curl -vo ./myphp.min.js \</div><div class="line">    -X POST \</div><div class="line">    -H <span class="string">'Expect: '</span> \</div><div class="line">    --data-urlencode compilation_level=<span class="string">"SIMPLE_OPTIMIZATIONS"</span> \</div><div class="line">    --data-urlencode output_format=<span class="string">"text"</span> \</div><div class="line">    --data-urlencode output_info=<span class="string">"compiled_code"</span> \</div><div class="line">    --data-urlencode js_code@myLocutus \</div><div class="line">    http://closure-compiler.appspot.com/compile</div></pre></td></tr></table></figure>
<p>but some people think php.js should bundle all of it’s functions into one big file:</p>
<blockquote>
<p>Not providing an all-in-one, downloadable, minified, ready-to-use
.js file is going to kill php.js.
You’ve abandoned windows users, and really any non-CLI junkie.
While I am capable of compiling this myself, what a headache.
You’ve introduced a barrier-to-entry that didn’t exist before,
and by not existing, allowed for the following you now have.
I <em>highly</em> suggest that you have this available for download,
either here or on github, such that you can keep (and maintain)
the momentum you worked so hard for.</p>
</blockquote>
<p>I’d like to comment on that here. While I appreciate the sentiment, wether the
project is being killed by these changes depends on how you look at php.js.
To me, php.js is a resource:</p>
<ul>
<li>For PHP developers that want see how it’s done in JavaScript</li>
<li>That enables fun experiments</li>
<li>With a few higher level functions that are incredibly useful, and missing in JavaScript</li>
</ul>
<p>This is what I feel php.js should focus on. Making functions. Making them better.</p>
<p>If - on the other hand - you think of php.js as a</p>
<ul>
<li>2.1MB, 451-function, ready-to-rock spaceship that you can plug into your website so you can keep typing PHP client-side, not caring about learning JavaScript or how that extra weight might impact the user experience</li>
</ul>
<p>..then yes, <em>these changes are going to kill php.js</em>.</p>
<p>I have limited time to spend on open source, and I want to spend it on things I enjoy and can believe in.
Not on working to support use-cases that keep new developers from learning, or make the web slower.
I’m sorry if this upsets folks but it really is my free time.</p>
<p>Luckily though for people with different views, I released php.js under MIT so
it’s cool for anybody to fork this project and run with it.</p>
<p>If anything, knowing that the php.js repository will focus on the raw <code>./functions</code>
makes this easier.</p>
<p>Best wishes,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi everybody,&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;/blog/2012/09/26/new-site/&quot;&gt;new site&lt;/a&gt; has no server-side code. Instead
we generate HTML &lt;a href=&quot;htt
    
    </summary>
    
    
      <category term="focus" scheme="http://locutus.io/tags/focus/"/>
    
  </entry>
  
  <entry>
    <title>New Site</title>
    <link href="http://locutus.io/2012/09/new-site/"/>
    <id>http://locutus.io/2012/09/new-site/</id>
    <published>2012-09-26T00:00:00.000Z</published>
    <updated>2017-02-23T10:40:23.818Z</updated>
    
    <content type="html"><![CDATA[<p>Hi everybody,</p>
<p>Welcome to our new site.
The old one had a lot of dead weight that nobody used and was basically unmaintained.</p>
<p>This one is generated by Octopress as plain html, and then stored on Github pages.</p>
<p>The source to do that is inside the Locutus directory in the <code>_octopress</code> dir,
and freely available.</p>
<p>For instance, you can now very easily:</p>
<ul>
<li><a href="https://github.com/kvz/locutus/edit/master/_octopress/source/about/index.markdown" target="_blank" rel="external">edit the about page</a></li>
<li><a href="https://github.com/kvz/locutus/edit/master/_octopress/source/_posts/2012-09-26-new-site.markdown" target="_blank" rel="external">change this blog post</a></li>
<li><a href="https://github.com/kvz/locutus/blob/master/_octopress/source/_includes/custom/navigation.html" target="_blank" rel="external">checkout the navigation</a></li>
<li><a href="https://github.com/kvz/locutus/blob/master/_octopress/Rakefile#L30" target="_blank" rel="external">improve the way function pages are built</a></li>
</ul>
<p>Next, any <a href="https://github.com/kvz/locutus/graphs/contributors" target="_blank" rel="external">Locutus contributor</a>
who has <a href="http://kvz.io/blog/2012/09/25/blog-with-octopress/" target="_blank" rel="external">Octopress set up</a>
(this mostly involves having the right ruby &amp; gem versions) can then run
<code>make site MSG=&quot;describe what you did&quot;</code> in the
project’s root dir to deploy the changes.</p>
<p>This should make it easy for <a href="https://github.com/kvz/locutus/graphs/contributors" target="_blank" rel="external">Locutus contributors</a>
(or any Github user really, using pull requests)
to update the site, making it less dependent on few core members, and more a
community effort.</p>
<p>This is also the way I want to do regular Locutus development. Less via comments,
more via the power of Github.</p>
<p>To people wondering where the compiler has gone to, I’m discontinuing that feature.
It was more often broken then working, and I think this site should focus on
being a simple resource and discussion platform, and not much else.</p>
<p>Now that everything is open sourced more I think there’s room for anyone to build
a better alternative.</p>
<p>While I’m not actively involved with Locutus anymore, I hope taking this step will
make the project ready for the future.</p>
<p>Best wishes,</p>
<p><a href="http://twitter.com/kvz" target="_blank" rel="external">Kevin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi everybody,&lt;/p&gt;
&lt;p&gt;Welcome to our new site.
The old one had a lot of dead weight that nobody used and was basically unmaintained.&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="website" scheme="http://locutus.io/tags/website/"/>
    
      <category term="octopress" scheme="http://locutus.io/tags/octopress/"/>
    
      <category term="future" scheme="http://locutus.io/tags/future/"/>
    
  </entry>
  
</feed>
